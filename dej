#!/bin/bash

# Source directory
src="./"
cd $src;

# Prints a message with a new line at end
printfl () {
    printf "$1\n"
}

moreInfo="Try 'dej --help' for more information."

# Array for output
typeset -A help
typeset -A error

# Help when --help entered
help[0]=\
"Dej is a command-line tool which can sniff all transmitted packets on an
interface and save results inside files. Devices separated by MAC addresses.
For instance, you can run Dej on your WiFi-related-interface to see how much
network data each device used by your WiFi (in fact, Dej was created mainly
for this purpose).
Dej uses PHP, tcpdump and screen to run, so you must have them installed.
Because tcpdump canâ€™t be ran without root permissions, you must give root
permissions to Dej (e.g. run as sudo).

Available commands:
dej start
dej stop
dej restart
dej status
dej help [command]
dej config {option} {value}
dej config list
dej config create"

help[start]=\
"Usage: dej start
Starts Dej (needs root permissions)."

help[stop]=\
"Usage: dej stop
Stops Dej (needs root permissions)."

help[restart]=\
"Usage: dej restart
Stops Dej, then starts it (needs root permissions)."

help[status]=\
"Usage: dej status
Prints Dej running status (needs root permissions).

Possible values are:
'Not running.': You could run it using 'dej start'.
'W: Partially running.': Some files are running, some of them are not
You should restart dej by 'dej restart' and then run 'dej status' to check
if it's running properly. If the problem persists, you should check your
configuration files (exist in ./config/), especially data.json.
'Running': You could stop it using 'dej stop'.
'W: Running more than once.': Keep in mind, you should start Dej only once.
The output usually means you have ran it more than once. You should restart
Dej using 'dej restart' in this case."

help[config]=\
"Usage: dej config {option} {value}
Edits the configuration file and change {option}'s value to {value}. The
config file exist in ./config/data.json, which you can edit it manually."

help[configList]=\
"You can set update an option using:
'dej config {option} {value}'

List is not available."

# Errors while entering commands
error[commandIsAMust]=\
"You must specify a command.
$moreInfo"

error[badUsage]=\
"Bad usage.
$moreInfo"

error[unknownCommand]=\
"Unknown command
$moreInfo"

error[tooMany]=\
"Too many arguments supplied!
$moreInfo"

# No arguments supplied
if [ $# -eq 0 ]; then
    printfl "${error[commandIsAMust]}"

# An arguments supplied
elif [ $# -eq 1 ]; then
    case $1 in
        # Start PHP process for each command
        start|stop|status)
            sh src/php.sh $1
            ;;
        restart)
            sh src/php.sh stop
            sh src/php.sh start
            ;;
        --help)
            printfl "$help";
            ;;
        config)
            printfl "${error[badUsage]}"
            ;;
        *)
            printfl "${error[unknownCommand]}"
            ;;
    esac

# Two arguments supplied
elif [ $# -eq 2 ]; then
    case $1 in
        # User wants help on specific command
        --help|-h|help)
            case $2 in
                # Print help for each command
                start|stop|restart|status|config)
                    printfl "${help[${2}]}"
                    ;;
                *)
                    printfl "${error[unknownCommand]}"
                    ;;
            esac
            ;;
        start|stop|restart|status)
            case $2 in
                --help|-h|help)
                    printfl "${help[${1}]}"
                    ;;
                *)
                    printfl "${error[badUsage]}"
                    ;;
            esac
            ;;
        config)
            case $2 in
                # User wants a list of available fields
                list)
                    printfl "${help[configList]}"
                    ;;
                # User wants to create the configuration file
                create)
                    printfl "Creating configuration file..."
                    mkdir config > /dev/null
                    touch data.json
                    printfl "Created successfully."
                    ;;
                *)
                    printfl "${error[badUsage]}"
                    ;;
            esac
            ;;               
        *)
            printfl "${error[unknownCommand]}"
            ;;
    esac

# Three arguments supplied
elif [ $# -eq 3 ]; then
    case $1 in
        --help|start|stop|restart|status)
            printfl "${error[badUsage]}"
            ;;
        # Change the configuration file (i.e. config/data.json)
        config)
            sh src/php.sh config $2 $3
            ;;
        *)
            printfl "${error[unknownCommand]}"
            ;;
    esac

# Too many arguments (> 3)
else
    printfl "${error[tooMany]}"
fi